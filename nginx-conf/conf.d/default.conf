# 定义上游服务器组
upstream backend_servers {
     #  1. 轮询（默认）2. 可以通过weight设置权重 3.
    # # 1. 轮询（默认）
    # server 192.168.1.10:8001;
    # server 192.168.1.11:8001;

    # # 2. 权重方式
    # server 192.168.1.12:8001 weight=3;  # 访问比重为3
    # server 192.168.1.13:8001 weight=1;  # 访问比重为1

    # # 3. ip_hash方式
    # ip_hash;  # 根据客户端IP地址hash
    # server 192.168.1.14:8001;
    # server 192.168.1.15:8001;

    # # 4. 最少连接
    # least_conn;  # 选择连接数最少的服务器
    
    # # 其他参数
    # server 192.168.1.16:8001 max_fails=3 fail_timeout=30s;  # 失败3次后暂停30秒
    # server 192.168.1.17:8001 backup;  # 备用服务器
    # server 192.168.1.18:8001 down;    # 标记为离线状态
      # 使用 host.docker.internal 访问宿主机服务
    server 127.0.0.1:8000 weight=3;
    server 127.0.0.1:8001;
}
server {
    # HTTP 重定向到 HTTPS
    listen 80;
    server_name localhost;
    return 301 https://$server_name$request_uri;
}
 # 服务器配置
    server {
         # 启用 HTTPS
        listen 443 ssl;
        http2 on;  # 使用新的 http2 指令
        server_name localhost;
         # SSL 证书配置
        ssl_certificate /etc/nginx/ssl/nginx-selfsigned.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx-selfsigned.key;
        
        # SSL 优化配置
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        
        # 现代 SSL 配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256;
        ssl_prefer_server_ciphers off;
    
        # HSTS (建议开启)
        add_header Strict-Transport-Security "max-age=63072000" always;
        location / {
            root /usr/share/nginx/html; # 指定根目录
            index index.html; # 指定默认文件
            try_files $uri $uri/ /index.html;  # 支持前端路由
        }
        location /api1/ {
            proxy_pass http://backend_servers/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 添加调试头信息
            add_header X-Debug-Message $request_uri always;
        }
        location /api/ {
            proxy_pass http://localhost:3000; # 代理到后端服务
            proxy_set_header Host $host;            # 设置请求头中的Host字段为客户端请求的主机名
            proxy_set_header X-Real-IP $remote_addr;# 设置请求头中的X-Real-IP字段为客户端的真实IP地址
        }
        # 缓存配置
        location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
            expires 7d;  # 静态文件缓存7天
        }
        # 正则匹配 = 精确匹配 ^~ 优先匹配 ~和~* 不区分大小写 空格 普通匹配
}
